---
# Get the Virtual netowrk list
- name: get list of vms
  virt_net: command=list_nets
  register: virt_net_list
  
# Verify if default network has DHCP enable
## Disable DHCP if enable
- name: Get default network details
  virt_net: command=get_xml name=default
  register: default_xml
  when: net_default in virt_net_list.list_nets

- name: Destroy default network if DHCP enable
  virt_net: name=default state=absent
  when: (default_xml is defined) and ("{{ net_default }}" in "{{ virt_net_list.list_nets }}") and ("DHCP" in "{{ default_xml.get_xml }}")

  #  when: ("{{ net_default }}" in {{ virt_net_list.list_nets }}) and ('"DHCP" in {{ default_xml.get_xml }}')

#- name: Undefine default network if DHCP enable
#  virt_net: command=undefine name=default state=
#  when: ('"{{ net_default }}" in {{ virt_net_list.list_nets}}') and ('"DHCP" in default_xml.get_xml')

####### Default virtual network ########

- name: Create the default network if does not exist
  virt_net: command=define name={{ net_default }} autostart=yes xml='{{ lookup("template", "net_default_nodhcp_file.xml.j2") }}'
  when: (default_xml is defined) and (("{{ net_default }}" not in "{{ virt_net_list.list_nets }}") or ("DHCP" in "{{ default_xml.get_xml }}"))

#  when: ('{{ net_default }} not in {{ virt_net_list.list_nets }}') or ('"DHCP" in {{ default_xml.get_xml }}')


- name: Ensure that a network is active
  virt_net: state=active name={{ net_default }}

# Ensure that Default network will be started at boot
- virt_net: autostart=yes name={{ net_default }}

####### Provisioning virtual network ####

- name: Create the provisioning network if does not exist
  virt_net: command=define name={{ net_provisioning }} autostart=yes xml='{{ lookup("template", "provisiong.xml.j2") }}' 
  when: net_provisioning not in virt_net_list.list_nets

- name: Ensure that a network is active
  virt_net: state=active name={{ net_provisioning }}

# Ensure that provisioning network will be started at boot
- virt_net: autostart=yes name={{ net_provisioning }}


# Verify is stack has the permission access libvirt and virsh
- name: Verify /etc/polkit-1/localauthority/50-local.d/50-libvirt-user-stack.pkla
  stat: path=/etc/polkit-1/localauthority/50-local.d/50-libvirt-user-stack.pkla
  register: polkit_st

  
- name: Create the 50-libvirt-user-stack.pkla file
  template: src=50-libvirt-user-stack.j2 dest=/etc/polkit-1/localauthority/50-local.d/50-libvirt-user-stack.pkla owner=root group=root mode=0755
  when: not polkit_st.stat.exists
